{"version":3,"file":"ObservedDiv-7e80f57d.js","sources":["../../../src/ui/components/Infinite/styles.tsx","../../../src/ui/components/Infinite/ObservedDiv.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Observed = styled.div`\n  height: 3px;\n  width: 100%;\n`;\n","import * as React from \"react\";\nimport { useRef, useLayoutEffect } from \"react\";\nimport * as S from \"./styles\";\n\ninterface ObservedProps {\n  /** Handler for when the component intersects with the viewport */\n  onIntersect: () => void;\n}\n\n/**\n * Component that positions absolutely to the top or bottom of the container\n * and emits an event if it intersects with the view port using `IntersectionObserver`\n */\nexport function ObservedDiv({ onIntersect }: ObservedProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const callback = useRef(onIntersect);\n\n  useLayoutEffect(() => {\n    callback.current = onIntersect;\n  }, [onIntersect]);\n\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n\n    const observer = new IntersectionObserver((entries) => {\n      if (entries.some((entry) => entry.isIntersecting)) {\n        callback.current();\n      }\n    });\n\n    observer.observe(ref.current);\n\n    return () => observer.disconnect();\n  }, []);\n\n  return <S.Observed data-testid=\"observer\" ref={ref} />;\n}\n"],"names":["Observed","styled","ObservedDiv","onIntersect","ref","useRef","callback","useLayoutEffect","observer","entries","entry","jsx","S.Observed"],"mappings":"4HAEO,MAAAA,EAAAC,EAAA;AAAA;AAAA;AAAA,8gBCWA,SAAAC,EAAA,CAAA,YAAAC,GAAA,CACL,MAAAC,EAAAC,SAAA,IAAA,EACAC,EAAAD,SAAAF,CAAA,EAEAI,OAAAA,EAAAA,gBAAA,IAAA,CACED,EAAA,QAAAH,CAAmB,EAAA,CAAAA,CAAA,CAAA,EAGrBI,EAAAA,gBAAA,IAAA,CACE,GAAA,CAAAH,EAAA,QAAkB,OAElB,MAAAI,EAAA,IAAA,qBAAAC,GAAA,CACEA,EAAA,KAAAC,GAAAA,EAAA,cAAA,GACEJ,EAAA,QAAA,CACF,CAAA,EAGF,OAAAE,EAAA,QAAAJ,EAAA,OAAA,EAEA,IAAAI,EAAA,YAAiC,EAAA,CAAA,CAAA,EAGnCG,EAAAC,EAAA,CAAA,cAAA,WAAA,IAAAR,CAAA,CAAA,CACF"}