import{j as c}from"./jsx-runtime-29545a09.js";import{r as t}from"./index-76fb7be0.js";import{s as l}from"./SPA-4e5a8262.js";const n=l.div`
  height: 3px;
  width: 100%;
`;try{n.displayName="Observed",n.__docgenInfo={description:"",displayName:"Observed",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"any"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"undefined"}},forwardedAs:{defaultValue:null,description:"",name:"forwardedAs",required:!1,type:{name:"undefined"}}}}}catch{}function o({onIntersect:e}){const r=t.useRef(null),s=t.useRef(e);return t.useLayoutEffect(()=>{s.current=e},[e]),t.useLayoutEffect(()=>{if(!r.current)return;const i=new IntersectionObserver(a=>{a.some(d=>d.isIntersecting)&&s.current()});return i.observe(r.current),()=>i.disconnect()},[]),c(n,{"data-testid":"observer",ref:r})}try{o.displayName="ObservedDiv",o.__docgenInfo={description:"Component that positions absolutely to the top or bottom of the container\nand emits an event if it intersects with the view port using `IntersectionObserver`",displayName:"ObservedDiv",props:{onIntersect:{defaultValue:null,description:"Handler for when the component intersects with the viewport",name:"onIntersect",required:!0,type:{name:"() => void"}}}}}catch{}export{o as O};
//# sourceMappingURL=ObservedDiv-eeae6c23.js.map
